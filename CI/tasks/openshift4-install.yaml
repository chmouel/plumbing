---
apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: openshift4-install
spec:
  inputs:
    params:
    - name: CLUSTER_NAME
      description: Cluster name
      default: "openshift-pipelines-install"

    - name: BASE_DOMAIN
      description: Base domain of your cluster install
      default: "devcluster.openshift.com"

    - name: REPLICAS
      description: How many replicas
      default: "3"

    - name: AWS_REGION
      description: AWS Region where to install
      default: "us-east-2"

    - name: IMAGE_NAME
      description: Container image
      default: "image-registry.openshift-image-registry.svc:5000/ci-openshift-pipelines/openshift-pipeline-bootstrap"

    - name: UPLOADER_HOST
      description: If you have this https://github.com/chmouel/openshift-django-uploader/ installed then set it here.
      default: ""

  steps:
  - name: openshift-install-config
    image: $(inputs.params.IMAGE_NAME)
    workingDir: /workspace/install
    env:
    - name: REGISTRY_TOKEN
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: registry-token
    - name: PUBLIC_SSH_KEY
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: public-ssh-key
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: aws-access-key-id
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: aws-secret-access-key
    script: |
      #!/usr/bin/env bash
      cat << EOF > install-config.yaml
      apiVersion: v1
      baseDomain: $(inputs.params.BASE_DOMAIN)
      compute:
      - hyperthreading: Enabled
        name: worker
        platform: {}
        replicas: $(inputs.params.REPLICAS)
      controlPlane:
        hyperthreading: Enabled
        name: master
        platform: {}
        replicas: $(inputs.params.REPLICAS)
      metadata:
        creationTimestamp: null
        name: $(inputs.params.CLUSTER_NAME)
      networking:
        clusterNetwork:
        - cidr: 10.128.0.0/14
          hostPrefix: 23
        machineCIDR: 10.0.0.0/16
        networkType: OpenShiftSDN
        serviceNetwork:
        - 172.30.0.0/16
      platform:
        aws:
          region: $(inputs.params.AWS_REGION)
      pullSecret: '$REGISTRY_TOKEN'
      sshKey: '$PUBLIC_SSH_KEY'
      EOF

  - name: openshift-install-clean-previous-install
    image: $(inputs.params.IMAGE_NAME)
    workingDir: /workspace/install
    env:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: aws-access-key-id
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: aws-secret-access-key
    script: |
      #!/usr/bin/env bash
      set -eu
      [[ -n "$(inputs.params.UPLOADER_HOST)" ]] || exit 0
      curl -f -O $(inputs.params.UPLOADER_HOST)/$(inputs.params.CLUSTER_NAME)/metadata.json || exit 0
      echo "Trying to delete previous cluster (if it wasn't reaped already)"
      /usr/local/bin/openshift-install destroy cluster  --log-level=debug || true

  - name: openshift-install-create
    env:
    - name: AWS_ACCESS_KEY_ID
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: aws-access-key-id
    - name: AWS_SECRET_ACCESS_KEY
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: aws-secret-access-key
    image: $(inputs.params.IMAGE_NAME)
    workingDir: /workspace/install
    script: |
      #!/usr/bin/env bash
      set -e
      /usr/local/bin/openshift-install create cluster --log-level=debug
      cat metadata.json

  - name: openshift-install-save-artifacts
    env:
    - name: UPLOADER_USERNAME
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-username
    - name: UPLOADER_PASSWORD
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: uploader-password
    - name: UPLOADER_PUBRING
      valueFrom:
        secretKeyRef:
          name: openshift-install
          key: upload-pubring.gpg
    image: $(inputs.params.IMAGE_NAME)
    workingDir: /workspace/install
    script: |
      #!/usr/bin/env bash
      set -ex
      gpg_args=
      key=

      function upload() {
        set -x
        dest="$2"
        [[ -z ${dest} ]] && dest="$(inputs.params.CLUSTER_NAME)/$(basename ${1})"
        curl -u ${UPLOADER_USERNAME}:${UPLOADER_PASSWORD} \
          -F path=${dest} \
          -F file=@${1} \
          $(inputs.params.UPLOADER_HOST)/upload
      }

      [[ -n "$(inputs.params.UPLOADER_HOST)" && -n ${UPLOADER_PUBRING} && -n ${UPLOADER_USERNAME} && -n ${UPLOADER_PASSWORD} ]] || exit 0

      # Upload metadata.json asap
      upload metadata.json

      echo "${UPLOADER_PUBRING}" > /tmp/pubring.pgp
      gpg --import /tmp/pubring.pgp
      for key in $(gpg --list-public-keys --list-options no-show-photos --fingerprint --with-colons|awk -F: '$1 ~ /fpr/ {print $10}');do
        gpg_args="$gpg_args -r$key"
      done

      bzip2 -9c .openshift_install.log > auth/install.log.bz2
      tail -2 .openshift_install.log > auth/webaccess

      for encryptfile in auth/*;do
        [[ -f ${encryptfile} ]] || continue
        gpg --batch -e --trust-model=always ${gpg_args}  ${encryptfile}
        upload ${encryptfile}.gpg
      done

      upload auth/kubeconfig private/$(inputs.params.CLUSTER_NAME)/kubeconfig
